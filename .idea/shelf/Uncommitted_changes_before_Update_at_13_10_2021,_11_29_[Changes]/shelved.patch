Index: src/no/hvl/dat100/prosjekt/modell/KortSamling.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package no.hvl.dat100.prosjekt.modell;\n\nimport no.hvl.dat100.prosjekt.TODO;\nimport no.hvl.dat100.prosjekt.kontroll.dommer.Regler;\n\n/**\n * Struktur for å lagre ei samling kort. Kan lagre hele kortstokken. Det finnes\n * en konstant i klassen Regler som angir antall kort i hver av de 4 fargene. Når\n * programmet er ferdig settes denne til 13, men under utvikling / testing kan\n * det være praktisk å ha denne mindre.\n * \n */\npublic class KortSamling {\n\n\tprivate final int MAKS_KORT = 4 * Regler.MAKS_KORT_FARGE;\n\n\tprivate Kort[] samling;\n\tprivate int antall;\n\n\t/**\n\t * Oppretter en tom Kortsamling med plass til MAKS_KORT (hele kortstokken).\n\t */\n\tpublic KortSamling() { //Martin (FERDIG)\n\t\tantall = 0;\n\t\tthis.samling = new Kort[MAKS_KORT];\n\t}\n\n\t/**\n\t * Returnerer en tabell med kortene i samlinga. Tabellen trenger ikke være\n\t * full. Kortene ligger sammenhengende fra starten av tabellen. Kan få\n\t * tilgang til antallet ved å bruke metoden getAntallKort(). Metoden er\n\t * først og fremst ment å brukes i testklasser. Om man trenger\n\t * kortene utenfor, anbefales metoden getAlleKort().\n\t * \n\t * @return tabell av kort.\n\t */\n\tpublic Kort[] getSamling() { //FERDIG\n\t\t\n\t\treturn samling;\n\t\t\n\t}\n\t\n\t/**\n\t * Antall kort i samlingen.\n\t * \n\t * @return antall kort i samlinga.\n\t */\n\tpublic int getAntalKort() { //Martin (FERDIG)\n\t\t\n\t\treturn antall;\n\t}\n\t\n\t/**\n\t * Sjekker om samlinga er tom.\n\t * \n\t * @return true om samlinga er tom, false ellers.\n\t */\n\tpublic boolean erTom() { //Martin (FERDIG)\n\n\t\treturn antall == 0;\n\t}\n\n\t/**\n\t * Legg et kort til samlinga.\n\t * \n\t * @param kort\n\t *            er kortet som skal leggast til.\n\t */\n\tpublic void leggTil(Kort kort) { //Martin (FERDIG)\n\t\t\n\t\tsamling[antall] = kort;\n\t\tantall++;\n\t}\n\t\n\t/**\n\t * Legger alle korta (hele kortstokken) til samlinga. Korta vil være sortert\n\t * slik at de normalt må stokkes før bruk.\n\t */\n\tpublic void leggTilAlle() { //Martin (TODO legg til kortstokken slik at den er full (12 kort)\n\t\t//TODO Husk: bruk Regler.MAKS_KORT_FARGE for å få antall kort per farge\n\t\tKort[] tab = new Kort[samling.length];\n\n\t\tfor (int i = 0; i <= Regler.MAKS_KORT_FARGE*4-1; i++) {\n\n\t\t\tfor (int j = 0; j < Regler.MAKS_KORT_FARGE; j++) {\n\t\t\t\ttab[j] = new Kort(Kortfarge.Hjerter, i);\n\t\t\t}\n\t\t\tfor (int j = Regler.MAKS_KORT_FARGE; j < Regler.MAKS_KORT_FARGE*2; j++) {\n\t\t\t\ttab[j] = new Kort(Kortfarge.Ruter, i);\n\t\t\t}\n\t\t\tfor (int j = Regler.MAKS_KORT_FARGE*2; j < Regler.MAKS_KORT_FARGE*3; j++) {\n\t\t\t\ttab[j] = new Kort(Kortfarge.Klover, i);\n\t\t\t}\n\t\t\tfor (int j = Regler.MAKS_KORT_FARGE*3; j < Regler.MAKS_KORT_FARGE*4-1; j++) {\n\t\t\t\ttab[j] = new Kort(Kortfarge.Spar, i);\n\t\t\t}\n\n\t\t\tleggTil(tab[i]);\n\n\t\t}\n\n\n\n\t}\n\n\t/**\n\t * Fjerner alle korta fra samlinga slik at den blir tom.\n\t */\n\tpublic void fjernAlle() {\n\t\t\n\t\tfor (int i = 0; i < samling.length; i++){\n\n\t\t\tsamling[i] = null;\n\n\t\t\tif (antall > 0) {\n\t\t\t\tantall--;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Ser på siste kortet i samlinga.\n\t * \n\t * @return siste kortet i samlinga, men det blir ikke fjernet. Dersom samalinga er tom, returneres\n\t *         null.\n\t */\n\tpublic Kort seSiste() {\n\t\tif (samling == null || antall==0) {\n\t\t\treturn null;\n\t\t}\n\t\t\telse {\n\n\t\t\treturn samling[antall-1];\n\t\t\t}\n\n\n\n\t}\n\n\t/**\n\t * Tek ut siste kort fra samlinga.\n\t * \n\t * @return siste kortet i samlinga. Dersom samalinga er tom, returneres\n\t *         null.\n\t */\n\tpublic Kort taSiste() {\n\n\t\tKort sisteKort = new Kort(null, 0);\n\t\tif (antall == 0) {\n\t\t\treturn null;\n\t\t}\n\t\telse{\n\t\t\tsisteKort = samling[antall-1];\n\t\t\tfjern(samling[antall-1]);\n\n\t\t}\n\t\treturn sisteKort;\n\n\t}\n\t\n\t/**\n\t * Undersøker om et kort finst i samlinga.\n\t * \n\t * @param kort\n\t *\n\t * @return true om kortet finst i samlinga, false ellers.\n\t */\n\n\tpublic boolean har(Kort kort) { //ERIK (FERDIG)\n\n\t\tif (kort != null) {\n\n\t\t\tfor (Kort k : samling) {\n\n\t\t\t\tif (kort.equals(k) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Fjernar et kort frå samlinga. Dersom kortet ikke finnest i samlinga,\n\t * skjer ingenting med samilingen\n\t * \n\t * @param kort\n\t *            kortet som skal fjernast. Dersom kortet ikke finnes, skjer\n\t *            ingenting.\n\t * @return true om kortet blev fjernet fra samlinga, false ellers.\n\t */\n\t\t\t \n\tpublic boolean fjern(Kort kort) {\n\n\t\tfor (int k = 0; k < antall; k++){\n\n\t\t\tif (samling[k].equals(kort)) {\n\n\t\t\t\tsamling[k] = samling[antall-1];\n\n\t\t\t\tsamling[antall-1] = null;\n\n\t\t\t\tantall --;\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Gir kortene som en tabell av samme lengde som antall kort i samlingen\n\t * \n\t * @return tabell av kort som er i samlingen, der kort skal ha samme rekkefølge\n\t *         som i kortsamlinga.\n\t */\n\t//Sigve\n\tpublic Kort[] getAllekort() {\n\n\t\tKort[]tabell = new Kort[antall];\n\t\t\n\t\tfor (int i = 0; i < tabell.length; i++) {\n\t\t\ttabell[i] = samling[i];\n\t\t}\n\treturn tabell;\n\t}\n\t\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/no/hvl/dat100/prosjekt/modell/KortSamling.java b/src/no/hvl/dat100/prosjekt/modell/KortSamling.java
--- a/src/no/hvl/dat100/prosjekt/modell/KortSamling.java	(revision 84b49880ee1c1dd221d2d2e08e176ab07e7ce025)
+++ b/src/no/hvl/dat100/prosjekt/modell/KortSamling.java	(date 1634116883243)
@@ -80,18 +80,18 @@
 		//TODO Husk: bruk Regler.MAKS_KORT_FARGE for å få antall kort per farge
 		Kort[] tab = new Kort[samling.length];
 
-		for (int i = 0; i <= Regler.MAKS_KORT_FARGE*4-1; i++) {
+		for (int i = 0; i <= MAKS_KORT-1; i++) {
 
-			for (int j = 0; j < Regler.MAKS_KORT_FARGE; j++) {
+			for (int j = 1; j < Regler.MAKS_KORT_FARGE; j++) {
 				tab[j] = new Kort(Kortfarge.Hjerter, i);
 			}
-			for (int j = Regler.MAKS_KORT_FARGE; j < Regler.MAKS_KORT_FARGE*2; j++) {
+			for (int j = 1; j < Regler.MAKS_KORT_FARGE; j++) {
 				tab[j] = new Kort(Kortfarge.Ruter, i);
 			}
-			for (int j = Regler.MAKS_KORT_FARGE*2; j < Regler.MAKS_KORT_FARGE*3; j++) {
+			for (int j = 1; j < Regler.MAKS_KORT_FARGE; j++) {
 				tab[j] = new Kort(Kortfarge.Klover, i);
 			}
-			for (int j = Regler.MAKS_KORT_FARGE*3; j < Regler.MAKS_KORT_FARGE*4-1; j++) {
+			for (int j = 1; j < Regler.MAKS_KORT_FARGE; j++) {
 				tab[j] = new Kort(Kortfarge.Spar, i);
 			}
 
